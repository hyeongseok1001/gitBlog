
 첫번 째 예)
 Return fun(n-1)+n;
 여기서 +n은 반환시간에 처리됨, 

 활성레코드 생성: 
해당 재귀 함수가 매번 호출될 떄 마다 새로운 활성레코드와 변수가 메모리 내에 생성되며 그 변수는 5부터 0까지의 값을 지니게 됨. => 함수의 지역변수

 Static 변수: 메모리내의 코드영역에 생성됨. 코드영역의 세부항목은 global변수와 static변수의 영역으로 불리어짐.
Static 변수는 (해당 재귀 함수가 호출될 때마다 매번 생성되는 것이 아니고) 단 한번 생성되며, 프로그램의 로딩시간에 이루어 짐.
따라서 정적변수 x는 (지역변수n과 같이) 여러번의 복사가 이루어 지지 않고 단 하나의 사본이 있게 된다.
 => 이렇게 호출된 모든 재귀함수들은 단 하나의 사본인 정적변수 x를 이용하게 됨.  (지역변수 n과 같이 재귀함수가 호출될 때 마다 별도의 복사본을 갖고 있지 않음)

 첫번째 예 + static변수 x 추가)
 재귀추적 시, 정적 변수는 별도로 단 하나의 사본으로 기재 하고 추적트리에 포함시키지 않음. 
 Return fun(n-1) + x 에서 x는 반환시간에 더해지므로 호출단계에서 사용하지 않고 반환시간에 사용.
 Return fun(n-1)+n 인 경우, n은 각 호출단계에서 n자신의 값을 지니고 있었으므로 해당 값을 사용되었지만, 
지금의 경우(return fun(n-1)+x)에서는 단 하나의 정적변수 x의 사본만 있는 상황이므로 각 호출단계에서는 같은 정적변수 x의 사본을 사용하게 된다.
(현재 static 변수 x의 값으로 5를 지니므로 같은 5의 값이 모두 사용됨)

 Static 변수가 재귀함수 내에 있는 경우, 해당 정적 변수를 재귀 추적 트리의 각 단계마다 보여지게 하지 말고 global(외부)변수와 같이 기재 후,
단 하나의 복사본이 있는 효과를 유지한다.
 또한 재귀함수 내에 정적변수를 선언하는 것이 아닌, 바깥쪽(외부)에 (global 변수와 같이) 변수를 선언해도 결과는 동일. 
(static변수나 global변수 모두 단 하나의 복사본을 지닌상태에서 모든 함수호출에서 같은 사본이 사용되어지기 때문, global변수도 메모리에서 코드영역에 생성됨,
따라서 프로그램내의 함수에서도 동일한 결과를 나타냄.)